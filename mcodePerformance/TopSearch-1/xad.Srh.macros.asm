/*******************************************************************************
*
*  Company:       Radware Ltd.
*  Platform:      DefensePro ODS-HT
*  Project:       NP-4 XAD Driver
*  Component:     Microcode
*
*  File:          xad.Srh.Macros.asm
*
*  Usage:         xad.Srh.asm macro file
*
*******************************************************************************/

#include "EZsearch.h"
#include "xad.common.h"
Export   "src_labels.h";


#define  BIT3_RST 0xFB
#define  BIT4_RST 0xF7
#define  BIT5_RST 0xDF
#define  BIT6_RST 0xBF
#define  BIT7_RST 0x7F


//Current layout
//25-26 - Policy ID 2 bytes
//27-28 L23 bitmask
//29-30 L4  bitmask
//31 -  DNS-bitmask
// I going to stoll 1 byte from  bit mask result L4 TREG[127] as temporary BDOS_FIELDS_47_TEMP_SEL_OFF   

//#define BDOS_FIELDS_47_SEL_OFF       CMP_BDOS_L4_SIGNA_CNTRL_OFF
//#define BDOS_FIELDS_47_SEL_OFF         

//#define BDOS_FIELDS_47_TEMP_SEL_OFF  127 //maximum TCP = 7 fields 28 bytes
//#define BDOS_FIELDS_23_SEL_OFF       (27+L3_KEY_OFFSET) 
//#define BDOS_FIELDS_23_TEMP_SEL_OFF  (30 + L4_KEY_OFFSET) //L4 low bit controller already done , reuse it



#define BDOS_LKSD_POLICY_L23_CNTR_OFF 27

#define GLOB_BDOS_L23_STORE_OFFSET  (BDOS_LKSD_POLICY_RES_OFF + BDOS_LKSD_POLICY_L23_CNTR_OFF) //2 byte  copied from initial policy lksd result bit 29 list significant


#define GLOB_BDOS_L4_STORE_OFFSET   (30 + L4_KEY_OFFSET + 1)//2 byte  copied from initial policy lksd result bit 29 list significant

#define BDOS_LKSD_POLICY_L47_CNTR_OFF 29

#define BDOS_FIELDS_47_SEL_OFF { BDOS_LKSD_POLICY_RES_OFF + BDOS_LKSD_POLICY_L47_CNTR_OFF } //96+29=125
#define BDOS_FIELDS_47_TEMP_SEL_OFF { BDOS_FIELDS_47_SEL_OFF + 1 } //126

#define BDOS_FIELDS_47_DNS_SEL_OFF { BDOS_FIELDS_47_TEMP_SEL_OFF + 1  } //127

#define BDOS_FIELDS_23_TEMP_SEL_OFF  { GLOB_BDOS_L23_STORE_OFFSET + 1 }
#define BDOS_LKSD_POLICY_RANGE_FIELDS_47_CNTR_OFF 23
#define BDOS_RANGE_FIELDS_47_SEL_OFF { BDOS_LKSD_POLICY_RES_OFF + BDOS_LKSD_POLICY_RANGE_FIELDS_47_CNTR_OFF } //119

// Macro: Attack_IPV4_Treat
// Lookups in the L3 attack structures
Macro Attack_IPV4_Treat;



// Sets Valid+Match bits (0,4) in result to '1'
//CMP TREG[TREG_BDOS_RES_OFF], TREG[0], TREG[0], 1;
//MovImm TREG[TREG_BDOS_RES_OFF], (1 << MATCH_BIT) | (1 << VALID_BIT), 1;

//MovImm  TREG[ TREG_BDOS_RES_OFF ] , 0 , 1;

//byte 104-120 for BDOS result , byte 80 for jmul operation  
//LookUp TREG[ TREG_BDOS_RES_OFF ] , DNS_ZERO_RES_STRUCT , TREG[ DNS_SUMMARY_RESULT_OFF ] , 1 ,TREG[0], 0  , RES_SIZE 32, KEEP_PREV_CTRL_BITS , NO_WR_LAST;

//try to avoid this shift
SHL TREG[{ GLOB_BDOS_L23_STORE_OFFSET + 1 }] , TREG[ { GLOB_BDOS_L23_STORE_OFFSET + 1 } ] , 1 , 1;

// Clear Key data ??? WTF
//write  TREG[TREG_TEMP_BDOS_KEY_TYP_OFF], 1, TREG[ TREG_BDOS_RES_OFF ] , 16;

BDOS_L23_LOOP:

 //load controller bitmask  to cond reg
WriteCond COND_REG, TREG[{ GLOB_BDOS_L23_STORE_OFFSET + 1 }]  ;

JMul  WRITE_BDOS_L23_STR0 ,
      FRGFLG_BDOS,// FRGFLG_VALIDATION_BIT 5    << 2
      TTL_BDOS,   // TTL_VALIDATION_BIT    4    << 2
      IPID_BDOS,  // IPID_VALIDATION_BIT   3    << 2
      TOS_BDOS,   // TOS_VALIDATION_BIT    2    << 2
      DIP_BDOS,   // DIP_VALIDATION_BIT    1    << 2
      SIP_BDOS;   // SIP_VALIDATION_BIT    0    << 2
      
JCond;
Jmp  WRITE_BDOS_L23_STR0;

SIP_BDOS:

#ifdef __TCAM_POC__

LookupTCAM    TREG[TREG_TEMP_BDOS_LKP_RES_OFF] , EXT_TCAM_STR, 
              TREG[ TREG_TEMP_BDOS_KEY_TYP_OFF ], 4 ,
              TREG[CMP_BDOS_L23_DIP_OFF], CMP_BDOS_L23_DIP_SIZE,
              PROFILE POLICY_PROFILE_ID, NO_WR_LAST ;

Lookup TREG[TREG_TEMP_BDOS_LKP_RES_OFF], POLICY_RES_STR,
		  	    TREG[{TREG_TEMP_BDOS_LKP_RES_OFF+1}], POLICY_RES_KEY_SIZE,
             TREG[TREG_TCAM_IDX_OFF], 0,NO_WR_LAST;


JNoMatch SKIP_WRITE_SIP;

MovImm TREG[{ TREG_BDOS_RES_OFF + DIP_RES_OFF }] , 0x40000000 , 4; 

SKIP_WRITE_SIP:

#endif

LookupAttackField IND_REG, CMP_BDOS_L23_SIP_OFF,
                  CMP_BDOS_L23_SIP_SIZE, SIP_RES_POS, SIP_RES_OFF, SIP_VALIDATION_BIT, SIP_FLD_TYP;

//reset bit 2 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , 0xFD,  1;

JCond;
Jmp BDOS_L23_LOOP;

DIP_BDOS:

#ifdef __TCAM_POC__

LookupTCAM    TREG[TREG_TEMP_BDOS_LKP_RES_OFF] , EXT_TCAM_STR, 
              TREG[ TREG_TEMP_BDOS_KEY_TYP_OFF ], 4 ,
              TREG[CMP_BDOS_L23_DIP_OFF], CMP_BDOS_L23_DIP_SIZE,
              PROFILE POLICY_PROFILE_ID, NO_WR_LAST ;

Lookup TREG[TREG_TEMP_BDOS_LKP_RES_OFF], POLICY_RES_STR,
		  	    TREG[{TREG_TEMP_BDOS_LKP_RES_OFF+1}], POLICY_RES_KEY_SIZE,
             TREG[TREG_TCAM_IDX_OFF], 0,NO_WR_LAST;


JNoMatch SKIP_WRITE_DIP;

MovImm TREG[{ TREG_BDOS_RES_OFF + DIP_RES_OFF }] , 0x80000000 , 4; 


// Copy temporary lookup result to BDOS result (that goes to OREG)
//Write TREG[{ TREG_BDOS_RES_OFF + DIP_RES_OFF }], 1, TREG[{TREG_TEMP_BDOS_LKP_RES_OFF + DIP_RES_POS}], 4;

SKIP_WRITE_DIP:

#endif 

LookupAttackField IND_REG, CMP_BDOS_L23_DIP_OFF,
                  CMP_BDOS_L23_DIP_SIZE, DIP_RES_POS, DIP_RES_OFF, DIP_VALIDATION_BIT, DIP_FLD_TYP;





And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] ,0xFB ,  1;

JCond;
Jmp BDOS_L23_LOOP;

TOS_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L23_TOS_OFF,
                  CMP_BDOS_L23_TOS_SIZE, TOS_RES_POS, TOS_RES_OFF, TOS_VALIDATION_BIT, TOS_FLD_TYP;


//reset bit 8 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] ,0xF7 ,  1;

JCond;
Jmp BDOS_L23_LOOP;

IPID_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L23_ID_NUM_OFF, 
                  CMP_BDOS_L23_ID_NUM_SIZE, IPID_RES_POS, IPID_RES_OFF, IPID_VALIDATION_BIT, IPID_FLD_TYP;


//reset bit 10 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] ,0xEF ,  1;

JCond;
Jmp BDOS_L23_LOOP;

TTL_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L23_TTL_OFF,
                  CMP_BDOS_L23_TTL_SIZE, TTL_RES_POS, TTL_RES_OFF, 7, TTL_FLD_TYP;


//reset bit 20 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , 0xDF ,  1;

JCond;
Jmp BDOS_L23_LOOP;

FRGFLG_BDOS:

LookupAttackField IND_REG, CMP_BDOS_L23_FRGMNT_FLG_OFF, 
                  CMP_BDOS_L23_FRGMNT_FLG_SIZE, FRGFLG_RES_POS, FRGFLG_RES_OFF, 7, FRGFLG_FLD_TYP;

//reset bit 40 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , 0xBF ,  1;

JCond;
Jmp BDOS_L23_LOOP;


WRITE_BDOS_L23_STR0:

 //load controller bitmask  to cond reg
//WriteCond COND_REG, TREG[BDOS_FIELDS_23_TEMP_SEL_OFF]  , SET_MATCH_BIT;


// Write first part L23 results
Write OREG, BDOS_ATTACK_RESULTS_L23_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE;

//zero policy placeholder , it will be used for BDOS result 
LookUp TREG[ TREG_BDOS_RES_OFF ] , DNS_ZERO_RES_STRUCT , TREG[ { TREG_TEMP_BDOS_KEY_TYP_OFF + 1} ] , 1 ,TREG[0], 0  , RES_SIZE 32, KEEP_PREV_CTRL_BITS , NO_WR_LAST;


/*
LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_FLOW_LABEL_OFF,
                  CMP_BDOS_L23_IPV6_FLOW_LABEL_SIZE, IPV6_FLOW_LABEL_RES_POS, IPV6_FLOW_LABEL_RES_OFF, IPV6_FLOW_LABEL_VALIDATION_BIT, IPV6_FLOW_LABEL_FLD_TYP;
 */
//well until l3 bdos will be fixed do some simple selection

//MovBits TREG[BDOS_FIELDS_23_TEMP_SEL_OFF].bit[0] , TREG[ GLOB_BDOS_L23_STORE_OFFSET ].bit[6] , 2;
/*
cmp TREG[BDOS_FIELDS_23_TEMP_SEL_OFF], TREG[ {BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ], 0x0, 1; 
writecond   COND_REG, TREG[BDOS_FIELDS_23_TEMP_SEL_OFF], SET_MATCH_BIT;
jcond;
jmatch END;
*/

LOOP_1:
 //load controller bitmask  to cond reg
WriteCond COND_REG, TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ]  ;

jmul IPv4_L23_SIZE  , IPv4_PROT , IPv4_L23_FRAG;

Write OREG, BDOS_ATTACK_RESULTS_L23_2_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE, WR_LAST;
Halt;

IPv4_L23_FRAG:
//bit 6 fragment offset 
LookupAttackField IND_REG, CMP_BDOS_L23_FRGMNT_OFF, 
                  CMP_BDOS_L23_FRGMNT_SIZE, FRGOFF_RES_POS, FRGOFF_RES_OFF, FRGOFF_VALIDATION_BIT, FRGOFF_FLD_TYP;

//reset bit 8 
And TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] , TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] ,0xDF ,  1;

JCond;
Jmp LOOP_1;

IPv4_PROT:
//L4PROT_VALIDATION_BIT             		7
LookupAttackField IND_REG, CMP_BDOS_L23_L4_PROT_OFF, 
                  CMP_BDOS_L23_L4_PROT_SIZE, L4PROT_RES_POS, L4_PROT_RES_OFF, L4PROT_VALIDATION_BIT, L4PROT_FLD_TYP;
//reset bit 8 
And TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] , TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] ,0xBF ,  1;

JCond;
Jmp LOOP_1;


IPv4_L23_SIZE:
//#define     L3_LENGTH_VALIDATION_BIT          7  //L3_LENGTH_STR
LookupAttackField IND_REG, {SAVED_2_CMP_BDOS_L23_L3_SIZE_IPV6_PROT_IP_VER + L3_COMMON_FLD_L3_SIZE_OFFSET}, 
                  CMP_BDOS_L23_L3_SIZE_SIZE, L3_LENGTH_RES_POS, IPV4_L3_LENGTH_RES_OFF, L3_LENGTH_VALIDATION_BIT, L3_LENGTH_FLD_TYP;

//reset bit 8 
And TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] , TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] ,0x7F ,  1;

JCond;
Jmp LOOP_1;


endmacro;


Macro Attack_IPV6_Treat;


//MovImm  TREG[ TREG_BDOS_RES_OFF ] , 0 , 1;
  
//LookUp TREG[ TREG_BDOS_RES_OFF ] , DNS_ZERO_RES_STRUCT , TREG[ DNS_SUMMARY_RESULT_OFF ] , 1 ,TREG[0], 0  , RES_SIZE 32, KEEP_PREV_CTRL_BITS , NO_WR_LAST;

//SHL TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[ 96 + 32 - 5 ] , 2 , 1;

SHL TREG[{ GLOB_BDOS_L23_STORE_OFFSET + 1 }] , TREG[ { GLOB_BDOS_L23_STORE_OFFSET + 1 } ] , 1 , 1;

//SHL TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_SEL_OFF] , 2 , 1;

// Clear Key data
//write  TREG[TREG_TEMP_BDOS_KEY_TYP_OFF], 1, TREG[ TREG_BDOS_RES_OFF ] , 16;

BDOS_IPv6_L23_LOOP:

 //load controller bitmask  to cond reg
WriteCond COND_REG, TREG[{ GLOB_BDOS_L23_STORE_OFFSET + 1 }]  ;

JMul  WRITE_BDOS_IPv6_L23_STR0 , /* prot type */
      FRGFLG_IPv6_BDOS,     // IPV6_FRGFLG_VALIDATION_BIT            5    << 2
      HOP_LIMIT_BDOS,       // IPV6_HOP_LIMIT_VALIDATION_BIT         4    << 2
      IPV6_FRGMNT_ID,       // IPV6_FRGID_VALIDATION_BIT             3    << 2
      TRAFFIC_CLASS_BDOS,   // IPV6_TRAFFIC_CLASS_VALIDATION_BIT     2    << 2
      DIP_IPv6_BDOS,        // IPV6_DIP_VALIDATION_BIT               1    << 2
      SIP_IPv6_BDOS;        // IPV6_SIP_VALIDATION_BIT               0    << 2
      
JCond;
Jmp  WRITE_BDOS_IPv6_L23_STR0;

SIP_IPv6_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_SIP_OFF,
                  CMP_BDOS_L23_IPV6_SIP_SIZE, IPV6_SIP_RES_POS, IPV6_SIP_RES_OFF, IPV6_SIP_VALIDATION_BIT, IPV6_SIP_FLD_TYP;

//reset bit 1 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , 0xFD,  1;

JCond;
Jmp BDOS_IPv6_L23_LOOP;

DIP_IPv6_BDOS:

LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_DIP_OFF,
                  CMP_BDOS_L23_IPV6_DIP_SIZE, IPV6_DIP_RES_POS, IPV6_DIP_RES_OFF, IPV6_DIP_VALIDATION_BIT, IPV6_DIP_FLD_TYP;


//reset bit 2 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] ,0xFB ,  1;

JCond;
Jmp BDOS_IPv6_L23_LOOP;

TRAFFIC_CLASS_BDOS:

LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_TRAFFIC_CLASS_OFF, 
                  CMP_BDOS_L23_IPV6_TRAFFIC_CLASS_SIZE, IPV6_TRAFFIC_CLASS_RES_POS, IPV6_TRAFFIC_CLASS_RES_OFF, IPV6_TRAFFIC_CLASS_VALIDATION_BIT, IPV6_TRAFFIC_CLASS_FLD_TYP;


//reset bit 3 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , 0xF7,  1;

JCond;
Jmp BDOS_IPv6_L23_LOOP;

IPV6_FRGMNT_ID:

LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_FRGMNT_ID_OFF,
                  CMP_BDOS_L23_IPV6_FRGMNT_ID_SIZE, IPV6_FRGID_RES_POS, IPV6_FRGID_RES_OFF, IPV6_FRGID_VALIDATION_BIT, IPV6_FRGID_FLD_TYP;


//reset bit 4 
And  TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF], 0xEF,  1;

JCond;
Jmp BDOS_IPv6_L23_LOOP;

HOP_LIMIT_BDOS:

LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_HOP_LIMIT_OFF,
                  CMP_BDOS_L23_IPV6_HOP_LIMIT_SIZE, IPV6_HOP_LIMIT_RES_POS, IPV6_HOP_LIMIT_RES_OFF, IPV6_HOP_LIMIT_VALIDATION_BIT, IPV6_HOP_LIMIT_FLD_TYP;


//reset bit 5 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , 0xDF,  1;

JCond;
Jmp BDOS_IPv6_L23_LOOP;


FRGFLG_IPv6_BDOS:

LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_FRGMNT_FLG_OFF, 
                  CMP_BDOS_L23_IPV6_FRGMNT_FLG_SIZE, IPV6_FRGFLG_RES_POS, IPV6_FRGFLG_RES_OFF, IPV6_FRGFLG_VALIDATION_BIT, IPV6_FRGFLG_FLD_TYP;


//reset bit 6 
And TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , BIT6_RST,  1;

JCond;
Jmp BDOS_IPv6_L23_LOOP;


#ifdef __comment__

IPV6_PROT_LABEL:

//L4PROT_VALIDATION_BIT             		7
LookupAttackField IND_REG, { /*TREG_TEMP_BDOS_KEY_TYP_SAVE_OFF*/64+2 }, 
                  CMP_BDOS_L23_L4_PROT_SIZE, L4PROT_RES_POS, L4_PROT_RES_OFF, L4PROT_VALIDATION_BIT, L4PROT_FLD_TYP;

And TREG[ BDOS_FIELDS_23_TEMP_SEL_OFF  ] , TREG[ BDOS_FIELDS_23_TEMP_SEL_OFF  ] ,BIT7_RST ,  1;

JCond;
Jmp BDOS_IPv6_L23_LOOP;

#endif 

WRITE_BDOS_IPv6_L23_STR0:




// Write first part L23 results
Write OREG, BDOS_ATTACK_RESULTS_L23_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE;

//zero policy placeholder , it will be used for BDOS result 
LookUp TREG[ TREG_BDOS_RES_OFF ] , DNS_ZERO_RES_STRUCT , TREG[ { TREG_TEMP_BDOS_KEY_TYP_OFF + 1} ] , 1 ,TREG[0], 0  , RES_SIZE 32, KEEP_PREV_CTRL_BITS , NO_WR_LAST;

LOOP_1:

 //load controller bitmask  to cond reg
WriteCond COND_REG, TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ]  ;


jmul IPV6_L23_L3_SIZE, IPV6_FLOW_LABEL, FRGOFF_IPv6_BDOS;

LookupAttackField IND_REG, {SAVED_2_CMP_BDOS_L23_L3_SIZE_IPV6_PROT_IP_VER + L3_COMMON_FLD_IPV6_L4_PROT_OFFSET}, 
                  CMP_BDOS_L23_L4_PROT_SIZE, L4PROT_RES_POS, L4_PROT_RES_OFF, L4PROT_VALIDATION_BIT, L4PROT_FLD_TYP;

Write OREG, BDOS_ATTACK_RESULTS_L23_2_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE, WR_LAST;
Halt;



FRGOFF_IPv6_BDOS:

LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_FRGMNT_OFF,
                  CMP_BDOS_L23_IPV6_FRGMNT_SIZE, IPV6_FRGOFF_RES_POS, IPV6_FRGOFF_RES_OFF, IPV6_FRGOFF_VALIDATION_BIT, IPV6_FRGOFF_FLD_TYP;

//reset bit 5 
And TREG[{ BDOS_FIELDS_23_TEMP_SEL_OFF + 1 }] , TREG[{ BDOS_FIELDS_23_TEMP_SEL_OFF + 1 }] ,  BIT5_RST ,  1;

JCond;
Jmp LOOP_1;

IPV6_FLOW_LABEL:

LookupAttackField IND_REG, CMP_BDOS_L23_IPV6_FLOW_LABEL_OFF,
                  CMP_BDOS_L23_IPV6_FLOW_LABEL_SIZE, IPV6_FLOW_LABEL_RES_POS, IPV6_FLOW_LABEL_RES_OFF, IPV6_FLOW_LABEL_VALIDATION_BIT, IPV6_FLOW_LABEL_FLD_TYP;

//reset bit 6 
And TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] , TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] ,0xBF ,  1;

JCond;
Jmp LOOP_1;


IPV6_L23_L3_SIZE:

//this offset was relocated due to TREG_TEMP_BDOS_LKP_RES_OFF = 45
LookupAttackField IND_REG, {SAVED_2_CMP_BDOS_L23_L3_SIZE_IPV6_PROT_IP_VER + L3_COMMON_FLD_L3_SIZE_OFFSET} , 
                  CMP_BDOS_L23_L3_SIZE_SIZE, L3_LENGTH_RES_POS, IPV6_L3_LENGTH_RES_OFF, L3_LENGTH_VALIDATION_BIT, IPV6_L3_LENGTH_FLD_TYP;

//reset bit 7 
And TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] , TREG[ { BDOS_FIELDS_23_TEMP_SEL_OFF + 1 } ] ,0x7F ,  1;

JCond;
Jmp LOOP_1;


endmacro;


Macro Attack_TCP_Treat STRUCT_OFFSET;

#define tmp_TCPFLGS_STR   (STRUCT_OFFSET + TCPFLGS_STR   ) // STR 14
#define tmp_TCPCHKSUM_STR (STRUCT_OFFSET + TCPCHKSUM_STR ) // STR 14
#define tmp_TCPSEQNUM_STR (STRUCT_OFFSET + TCPSEQNUM_STR ) // STR 14
#define tmp_TCPSPORT_STR  (STRUCT_OFFSET + TCPSPORT_STR  ) // STR 14
#define tmp_TCPDPORT_STR  (STRUCT_OFFSET + TCPDPORT_STR  ) // STR 14
#define tmp_L2_VLAN_STR      (STRUCT_OFFSET + L2_VLAN_STR     ) // STR 14
#define tmp_PACKET_SIZE_STR  (STRUCT_OFFSET + PACKET_SIZE_STR ) // STR 14


 
//LookUp TREG[ TREG_BDOS_RES_OFF ] , DNS_ZERO_RES_STRUCT , TREG[ DNS_SUMMARY_RESULT_OFF ] , 1 ,TREG[0], 0  , RES_SIZE 32, KEEP_PREV_CTRL_BITS , NO_WR_LAST;

//SHL TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[ BDOS_FIELDS_47_SEL_OFF ] , 1 , 1;

//MovImm  TREG[ TREG_BDOS_RES_OFF ] , 0 , 1;
  
//LookUp TREG[ TREG_BDOS_RES_OFF ] , DNS_ZERO_RES_STRUCT , TREG[ DNS_SUMMARY_RESULT_OFF ] , 1 ,TREG[0], 0  , RES_SIZE 32, KEEP_PREV_CTRL_BITS , NO_WR_LAST;

//Hell why I skip shift ????
//Write TREG[ BDOS_FIELDS_47_TEMP_SEL_OFF ] ,0 ,  TREG[ 96 + 32 - 3 ] , 1;
//SHL TREG[BDOS_FIELDS_23_TEMP_SEL_OFF] , TREG[ 96 + 32 - 5 ] , 2 , 1;

// Clear Key data
//write  TREG[TREG_TEMP_BDOS_KEY_TYP_OFF], 1, TREG[ TREG_BDOS_RES_OFF ] , 16;

SHL TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[ BDOS_FIELDS_47_TEMP_SEL_OFF ] , 1 , 1;
 
BDOS_L47_TCP_LOOP:

//load controller bitmask  to cond reg
WriteCond COND_REG, TREG[BDOS_FIELDS_47_TEMP_SEL_OFF]  ;

JMul  L2_VLAN_BDOS,        // L2_VLAN_VALIDATION_BIT      6 << 1
      PACKET_SIZE_BDOS,    // PACKET_SIZE_VALIDATION_BIT  5 << 1
      TCP_TCPFLGS_BDOS,    // TCPFLGS_VALIDATION_BIT      4 << 1
      TCP_TCPSEQNUM_BDOS,  // TCPSEQNUM_VALIDATION_BIT    3 << 1
      TCP_CHKSUM_BDOS,     // TCPCHKSUM_VALIDATION_BIT    2 << 1
      TCP_DP_BDOS,         // TCPDPORT_VALIDATION_BIT     1 << 1
      TCP_SP_BDOS;         // TCPSPORT_VALIDATION_BIT     0 << 1
JCond;

Jmp  L4_TCP_RANGE_SEL;

TCP_SP_BDOS:
Write TREG[80] , POLICY_RES_CONF_STR ,  TREG[CMP_BDOS_L4_SRC_PORT_OFF] , 2;
LookupAttackField IND_REG, /*CMP_BDOS_L4_SRC_PORT_OFF*/80, 
                  CMP_BDOS_L4_SRC_PORT_SIZE, TCPSPORT_RES_POS, TCP_SPORT_RES_OFF, TCPSPORT_VALIDATION_BIT, TCPSPORT_FLD_TYP;


//reset bit 0x02 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xFD ,  1;

JCond;
Jmp BDOS_L47_TCP_LOOP;

TCP_DP_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L4_DST_PORT_OFF,
                  CMP_BDOS_L4_DST_PORT_SIZE, TCPDPORT_RES_POS, TCP_DPORT_RES_OFF, TCPDPORT_VALIDATION_BIT, TCPDPORT_FLD_TYP;

//reset bit 0x04 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xFB ,  1;


JCond;
Jmp BDOS_L47_TCP_LOOP;

TCP_CHKSUM_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L4_CHECKSUM_OFF, 
                  CMP_BDOS_L4_CHECKSUM_SIZE, TCPCHKSUM_RES_POS, TCP_CHKSUM_RES_OFF, TCPCHKSUM_VALIDATION_BIT, TCPCHKSUM_FLD_TYP;


//reset bit 0x08 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xF7 ,  1;

JCond;
Jmp BDOS_L47_TCP_LOOP;

TCP_TCPSEQNUM_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L4_TCP_SEQ_NUM_OFF, 
                  CMP_BDOS_L4_TCP_SEQ_NUM_SIZE, TCPSEQNUM_RES_POS, TCP_SEQNUM_RES_OFF, TCPSEQNUM_VALIDATION_BIT, TCPSEQNUM_FLD_TYP;

//reset bit 0x10 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xEF ,  1;

JCond;
Jmp BDOS_L47_TCP_LOOP;

TCP_TCPFLGS_BDOS: 
LookupAttackField IND_REG, CMP_BDOS_L4_TCP_FLAGS_OFF, 
                  CMP_BDOS_L4_TCP_FLAGS_SIZE, TCPFLGS_RES_POS, TCP_FLAGS_RES_OFF, 0x7, TCPFLGS_FLD_TYP;


//reset bit 0x20 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xDF ,  1;

JCond;
Jmp BDOS_L47_TCP_LOOP;

PACKET_SIZE_BDOS:

#ifdef __TCAM_POC__

// Lookup in Int.TCAM to find a key for SYN Protection table
LookupTCAM TREG[TREG_TEMP_BDOS_LKP_RES_OFF], INT_TCAM_STR, 
           TREG[0], 26,		// SYN_PROT_DPORT_OFF (2bytes) + SYN_PROT_VLAN_OFF (2bytes) + SYN_PROT_DIP_OFF (16bytes) + SYN_PROT_PORT_OFF (1byte) 
           PROFILE INT_TCAM_LINE_NUM_SYN_PROT, NO_WR_LAST;   

//JNoMatch SYN_PROT_CONT;

// Lookup in SYN Protection table
Lookup TREG[TREG_TEMP_BDOS_LKP_RES_OFF      ], SYN_PROT_DEST_STR, 
       TREG[{TREG_TEMP_BDOS_LKP_RES_OFF + 1}], SYN_PROT_DEST_KEY_SIZE, 
       TREG[0],  0, 
       WR_LAST_IF_NO_JUMP;

#endif   /* __TCAM_POC__ */

LookupAttackField IND_REG, CMP_BDOS_L23_PACKET_SIZE_OFF, 
                  CMP_BDOS_L23_PACKET_SIZE_SIZE, PACKET_SIZE_RES_POS, PACKET_SIZE_RES_OFF, PACKET_SIZE_VALIDATION_BIT, PACKET_SIZE_FLD_TYP;

//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xBF ,  1;

JCond;
Jmp BDOS_L47_TCP_LOOP;

L2_VLAN_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L23_VLAN_OFF, 
                  CMP_BDOS_L23_VLAN_SIZE, L2_VLAN_RES_POS, L2_VLAN_RES_OFF, L2_VLAN_VALIDATION_BIT, L2_VLAN_FLD_TYP;

//reset bit 0x80 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0x7F ,  1;

JCond;
Jmp BDOS_L47_TCP_LOOP;


L4_TCP_RANGE_SEL:

//MovImm TREG[BDOS_RANGE_FIELDS_47_SEL_OFF], 0x3, 1;  
//read from configuration
SHL TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] , TREG[ BDOS_RANGE_FIELDS_47_SEL_OFF ] , 6 , 1;

L4_TCP_RANGE_SEL_LOOP:

//load controller bitmask  to cond reg
WriteCond COND_REG, TREG[BDOS_RANGE_FIELDS_47_SEL_OFF]  ;
JMul  TCP_RANGE_DP ,           //                             b7
      TCP_RANGE_SP,            //                             b6
      TCP_RANGE_ERROR_BDOS;

TCP_RANGE_ERROR_BDOS:

// Write first part L4 results
JCond;
Jmp  WRITE_BDOS_L47_TCP_STR;

TCP_RANGE_DP:

Attack_TF_Port_Treat TCPDPORT_FLD_TYP, CMP_BDOS_L4_DST_PORT_OFF, { TREG_BDOS_RES_OFF + TCP_DPORT_RES_OFF };
And TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] , TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] ,0x7F ,  1;
JCond;
Jmp L4_TCP_RANGE_SEL_LOOP;

TCP_RANGE_SP:
Attack_TF_Port_Treat TCPSPORT_FLD_TYP, CMP_BDOS_L4_SRC_PORT_OFF, { TREG_BDOS_RES_OFF + TCP_SPORT_RES_OFF };
And TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] , TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] ,0xBF ,  1;
JCond;
Jmp L4_TCP_RANGE_SEL_LOOP;


WRITE_BDOS_L47_TCP_STR:

// Write first part L4 results
//Write OREG, BDOS_ATTACK_RESULTS_L4_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE;
Write OREG, BDOS_ATTACK_RESULTS_L4_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE, NO_WR_LAST;


#undef tmp_TCPSPORT_STR;
#undef tmp_TCPDPORT_STR;
#undef tmp_TCPCHKSUM_STR;
#undef tmp_TCPSEQNUM_STR;
#undef tmp_TCPFLGS_STR;
#undef tmp_L2_VLAN_STR;
#undef tmp_PACKET_SIZE_STR;
endmacro;



Macro Attack_UDP_Treat STRUCT_OFFSET;


#define tmp_UDPCHKSUM_STR  (STRUCT_OFFSET + UDPCHKSUM_STR ) // STR 14
#define tmp_UDPSPORT_STR   (STRUCT_OFFSET + UDPSPORT_STR  ) // STR 14
#define tmp_UDPDPORT_STR   (STRUCT_OFFSET + UDPDPORT_STR  ) // STR 14
#define tmp_L2_VLAN_STR      (STRUCT_OFFSET + L2_VLAN_STR     ) // STR 14
#define tmp_PACKET_SIZE_STR  (STRUCT_OFFSET + PACKET_SIZE_STR ) // STR 14


SHL TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[ BDOS_FIELDS_47_TEMP_SEL_OFF ] , 1 , 1;

 
BDOS_L47_UDP_LOOP:

//load controller bitmask  to cond reg
WriteCond COND_REG, TREG[BDOS_FIELDS_47_TEMP_SEL_OFF]  ;

JMul  UDP_L2_VLAN_BDOS,       // L2_VLAN_VALIDATION_BIT      6 << 1
      UDP_PACKET_SIZE_BDOS,   // PACKET_SIZE_VALIDATION_BIT  5 << 1
      UDP_ERROR_BDOS,         // should be never occured     4
      UDP_CHKSUM_BDOS,        // UDPCHKSUM_VALIDATION_BIT    3 << 1
      UDP_ERROR_BDOS,         // should be never occured     2
      UDP_DP_BDOS ,           // UDPDPORT_VALIDATION_BIT     1 << 1
      UDP_SP_BDOS;            // UDPSPORT_VALIDATION_BIT     0 << 1

UDP_ERROR_BDOS:
JCond;
Jmp  L4_UDP_RANGE_SEL;


UDP_SP_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L4_SRC_PORT_OFF, 
                  CMP_BDOS_L4_SRC_PORT_SIZE,  UDPSPORT_RES_POS, UDP_SPORT_RES_OFF, UDPSPORT_VALIDATION_BIT, UDPSPORT_FLD_TYP;
//reset bit 0x2 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xFD ,  1;


JCond;
Jmp BDOS_L47_UDP_LOOP;


UDP_DP_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L4_DST_PORT_OFF, 
                  CMP_BDOS_L4_DST_PORT_SIZE, UDPDPORT_RES_POS, UDP_DPORT_RES_OFF, UDPDPORT_VALIDATION_BIT, UDPDPORT_FLD_TYP;

//reset bit 0x4 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xFB ,  1;

JCond;
Jmp BDOS_L47_UDP_LOOP;

UDP_CHKSUM_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L4_CHECKSUM_OFF, 
                  CMP_BDOS_L4_CHECKSUM_SIZE, UDPCHKSUM_RES_POS, UDP_CHKSUM_RES_OFF, UDPCHKSUM_VALIDATION_BIT, UDPCHKSUM_FLD_TYP;

//reset bit 0x10 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xEF ,  1;

WriteCond COND_REG, TREG[BDOS_FIELDS_47_TEMP_SEL_OFF]  ;

JCond;
Jmp BDOS_L47_UDP_LOOP;

UDP_PACKET_SIZE_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L23_PACKET_SIZE_OFF, 
                  CMP_BDOS_L23_PACKET_SIZE_SIZE, PACKET_SIZE_RES_POS, PACKET_SIZE_RES_OFF, PACKET_SIZE_VALIDATION_BIT, PACKET_SIZE_FLD_TYP;

//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0xBF ,  1;

JCond;
Jmp BDOS_L47_UDP_LOOP;

UDP_L2_VLAN_BDOS:
LookupAttackField IND_REG, CMP_BDOS_L23_VLAN_OFF, 
                  CMP_BDOS_L23_VLAN_SIZE, L2_VLAN_RES_POS, L2_VLAN_RES_OFF, L2_VLAN_VALIDATION_BIT, L2_VLAN_FLD_TYP;

//reset bit 0x80 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,0x7F ,  1;


JCond;
Jmp BDOS_L47_UDP_LOOP;

L4_UDP_RANGE_SEL:

//MovImm TREG[BDOS_RANGE_FIELDS_47_SEL_OFF], 0x3, 1;  //read from configuration
SHL TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] , TREG[ BDOS_RANGE_FIELDS_47_SEL_OFF ] , 6 , 1;

L4_UDP_RANGE_SEL_LOOP:

//load controller bitmask  to cond reg
WriteCond COND_REG, TREG[BDOS_RANGE_FIELDS_47_SEL_OFF]  ;

JMul  UDP_RANGE_DP ,           //                             b7
      UDP_RANGE_SP,            //                             b6
      UDP_RANGE_ERROR_BDOS;

UDP_RANGE_ERROR_BDOS:

// Write first part L4 results
Write OREG, BDOS_ATTACK_RESULTS_L4_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE, NO_WR_LAST;
jcond;
jmp ATTACK_UDP_TCP_DNS_SEARCH_LAB;

UDP_RANGE_DP:

Attack_TF_Port_Treat UDPDPORT_FLD_TYP, CMP_BDOS_L4_DST_PORT_OFF, { TREG_BDOS_RES_OFF + UDP_DPORT_RES_OFF };
//reset bit 0x80
And TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] , TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] ,0x7F ,  1;
JCond;
Jmp L4_UDP_RANGE_SEL_LOOP;

UDP_RANGE_SP:

Attack_TF_Port_Treat UDPSPORT_FLD_TYP,  CMP_BDOS_L4_SRC_PORT_OFF, { TREG_BDOS_RES_OFF + UDP_SPORT_RES_OFF };
//reset bit 0x40
And TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] , TREG[BDOS_RANGE_FIELDS_47_SEL_OFF] ,0xBF ,  1;
JCond;
Jmp L4_UDP_RANGE_SEL_LOOP;

#ifdef __comment__


#endif 


#undef tmp_UDPSPORT_STR;
#undef tmp_UDPDPORT_STR;
#undef tmp_UDPCHKSUM_STR;
#undef tmp_L2_VLAN_STR;
#undef tmp_PACKET_SIZE_STR;
endmacro;


// FastIP lookup using HW engine
/*
   The Lookup command should include 2 sources. SRC1 must be 2 bytes (2 MSB bytes of the key), 
   and SRC2 include the rest of the key. The result from this lookup is 4 bytes, and only 4 
   bytes will be written to TREG (1 byte control, and 3 bytes user data).  
*/
Macro Attack_TF_Port_Treat FLD_TYP, TREG_VALUE_OFFSET, FINAL_RES_OFFSET;

//read the mask for jmul - byte 2 bits 0-1 of Policy controller
//if bit 0 is set -  LKP should be done with Dst Port
//else JMP  TF_SrcPort
#define TREG_TF_PORT_KEY_TYP_OFF   232//  {TREG_TEMP_BDOS_KEY_TYP_OFF+TREG_TEMP_BDOS_KEY_TYP_SIZE};
#define TREG_TF_PORT_RES_TF_OFF    240//  {TREG_TEMP_BDOS_KEY_TYP_OFF+TREG_TEMP_BDOS_KEY_TYP_SIZE};
#define TREG_TF_PORT_TEMP_OFF      248

//#define TREG_TF_PORT_RANGE_STR_OFF  (CMP_BDOS_L4_CNTRL_OFF+1)



write  TREG[ { TREG_TF_PORT_KEY_TYP_OFF }],1, TREG[TREG_VALUE_OFFSET ], 2;
MovImm TREG[ {TREG_TF_PORT_KEY_TYP_OFF+2} ], FLD_TYP, 1;
write  TREG[ { TREG_TF_PORT_KEY_TYP_OFF+3 }],1, TREG[{ TREG_TEMP_BDOS_KEY_TYP_OFF + 1 } ], 2;

WriteIndReg  TREG[ { CMP_BDOS_L4_CNTRL_OFF +1 } ];


  Lookup    TREG[TREG_TF_PORT_RES_TF_OFF],  // DST
            IND_REG,// TF_PORT_FASTIP_P0_STR,                                         // lookup struct
            TREG[{ TREG_TF_PORT_KEY_TYP_OFF+3 }], 2,    // SRC1 (policy) - first 2 bytes
            TREG[TREG_TF_PORT_KEY_TYP_OFF], 3,    // SRC2 - the rest of the key 
            NO_WR_LAST;

 JNoMatch TF_End;

 Add TREG[TREG_TF_PORT_TEMP_OFF], TREG[(CMP_BDOS_L4_CNTRL_OFF +1)], 2, 1; //calculate the hash offset
 WriteIndReg  TREG[ TREG_TF_PORT_TEMP_OFF ];
 Lookup TREG[TREG_TF_PORT_RES_TF_OFF      ], IND_REG,// TF_PORT_HASH_P0_STR, 
        TREG[{TREG_TF_PORT_RES_TF_OFF + 1}], 3, 
        TREG[0],  0, 
        NO_WR_LAST;

 JNoMatch TF_End;

//Or with the BDOS result
Or TREG[FINAL_RES_OFFSET], TREG[FINAL_RES_OFFSET],TREG[{TREG_TF_PORT_RES_TF_OFF + 1}], 4;


TF_End:
 //return the original value to IND_REG
 WriteIndReg  TREG[ { CMP_BDOS_L4_CNTRL_OFF  } ];

endmacro;


Macro Attack_ICMP_Treat STRUCT_OFFSET;

#define tmp_ICMP_TYPE_STR     (STRUCT_OFFSET + ICMP_TYPE_STR   ) // STR 14
#define tmp_ICMP_CHKSUM_STR   (STRUCT_OFFSET + ICMP_CHKSUM_STR ) // STR 14
#define tmp_L2_VLAN_STR       (STRUCT_OFFSET + L2_VLAN_STR     ) // STR 14
#define tmp_PACKET_SIZE_STR   (STRUCT_OFFSET + PACKET_SIZE_STR ) // STR 14

BDOS_L47_ICMP_LOOP:

//load controller bitmask  to cond reg
WriteCond COND_REG, TREG[BDOS_FIELDS_47_TEMP_SEL_OFF]  ;

JMul  WRITE_RES ,   
      ICMP_L23_VLAN, 
      ICMP_L23_PACKET_SIZE, 
      WRITE_RES , 
      WRITE_RES ,
      ICMP_L4_CHECKSUM, 
      ICMP_TYPE ; //2 

WRITE_RES:

// Write first part L4 results
Write OREG, BDOS_ATTACK_RESULTS_L4_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE, NO_WR_LAST;
jcond;
jmp BDOS_L7_DNS_LOOP;

ICMP_TYPE: 

LookupAttackField IND_REG, CMP_BDOS_L4_ICMP_TYPE_OFF, 
                  CMP_BDOS_L4_ICMP_TYPE_SIZE,  ICMP_TYPE_RES_POS, ICMP_TYPE_RES_OFF, ICMP_TYPE_VALIDATION_BIT, ICMP_TYPE_FLD_TYP;

//reset bit 0x2 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , 0xFD ,  1;

JCond;
Jmp BDOS_L47_ICMP_LOOP;

ICMP_L4_CHECKSUM:
LookupAttackField IND_REG, CMP_BDOS_L4_CHECKSUM_OFF, 
                  CMP_BDOS_L4_CHECKSUM_SIZE, ICMP_CHKSUM_RES_POS, ICMP_CHKSUM_RES_OFF, ICMP_CHKSUM_VALIDATION_BIT, ICMP_CHKSUM_FLD_TYP;

//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , 0xFB ,  1;

JCond;
Jmp BDOS_L47_ICMP_LOOP;


ICMP_L23_PACKET_SIZE:

LookupAttackField IND_REG, CMP_BDOS_L23_PACKET_SIZE_OFF, 
                  CMP_BDOS_L23_PACKET_SIZE_SIZE, PACKET_SIZE_RES_POS, PACKET_SIZE_RES_OFF, PACKET_SIZE_VALIDATION_BIT, PACKET_SIZE_FLD_TYP;

//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,BIT5_RST ,  1;

JCond;
Jmp BDOS_L47_ICMP_LOOP;

ICMP_L23_VLAN:

LookupAttackField IND_REG, CMP_BDOS_L23_VLAN_OFF, 
                  CMP_BDOS_L23_VLAN_SIZE, L2_VLAN_RES_POS, L2_VLAN_RES_OFF, L2_VLAN_VALIDATION_BIT, L2_VLAN_FLD_TYP;


//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,BIT6_RST ,  1;

JCond;
Jmp BDOS_L47_ICMP_LOOP;

#undef tmp_ICMP_TYPE_STR;
#undef tmp_ICMP_CHKSUM_STR;
#undef tmp_L2_VLAN_STR;
#undef tmp_PACKET_SIZE_STR;

endmacro;



Macro Attack_IGMP_Treat STRUCT_OFFSET;

#define tmp_IGMP_TYPE_STR    (STRUCT_OFFSET + IGMP_TYPE_STR   ) // STR 14
#define tmp_IGMP_CHKSUM_STR  (STRUCT_OFFSET + IGMP_CHKSUM_STR ) // STR 14
#define tmp_L2_VLAN_STR      (STRUCT_OFFSET + L2_VLAN_STR     ) // STR 14
#define tmp_PACKET_SIZE_STR  (STRUCT_OFFSET + PACKET_SIZE_STR ) // STR 14

BDOS_L47_ICMP_LOOP:

//load controller bitmask  to cond reg
WriteCond COND_REG, TREG[BDOS_FIELDS_47_TEMP_SEL_OFF]  ;

JMul  WRITE_RES ,   
      ICMP_L23_VLAN, 
      ICMP_L23_PACKET_SIZE, 
      WRITE_RES , 
      WRITE_RES ,
      ICMP_L4_CHECKSUM, 
      ICMP_TYPE ; //2 

WRITE_RES:

// Write first part L4 results
Write OREG, BDOS_ATTACK_RESULTS_L4_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE, NO_WR_LAST;
jcond;
jmp BDOS_L7_DNS_LOOP;

ICMP_TYPE: 

LookupAttackField IND_REG, CMP_BDOS_L4_IGMP_TYPE_OFF, 
                  CMP_BDOS_L4_IGMP_TYPE_SIZE, IGMP_TYPE_RES_POS, IGMP_TYPE_RES_OFF, IGMP_TYPE_VALIDATION_BIT, IGMP_TYPE_FLD_TYP;

//reset bit 0x2 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , 0xFD ,  1;

JCond;
Jmp BDOS_L47_ICMP_LOOP;

ICMP_L4_CHECKSUM:
LookupAttackField IND_REG, CMP_BDOS_L4_CHECKSUM_OFF, 
                  CMP_BDOS_L4_CHECKSUM_SIZE, IGMP_CHKSUM_RES_POS, IGMP_CHKSUM_RES_OFF, IGMP_CHKSUM_VALIDATION_BIT, IGMP_CHKSUM_FLD_TYP;

//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , 0xFB ,  1;

JCond;
Jmp BDOS_L47_ICMP_LOOP;


ICMP_L23_PACKET_SIZE:

LookupAttackField IND_REG, CMP_BDOS_L23_PACKET_SIZE_OFF, 
                  CMP_BDOS_L23_PACKET_SIZE_SIZE, PACKET_SIZE_RES_POS, PACKET_SIZE_RES_OFF, PACKET_SIZE_VALIDATION_BIT, PACKET_SIZE_FLD_TYP;

//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,BIT5_RST ,  1;

JCond;
Jmp BDOS_L47_ICMP_LOOP;

ICMP_L23_VLAN:

LookupAttackField IND_REG, CMP_BDOS_L23_VLAN_OFF, 
                  CMP_BDOS_L23_VLAN_SIZE, L2_VLAN_RES_POS, L2_VLAN_RES_OFF, L2_VLAN_VALIDATION_BIT, L2_VLAN_FLD_TYP;


//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,BIT6_RST ,  1;

JCond;
Jmp BDOS_L47_ICMP_LOOP;

#undef tmp_ICMP_TYPE_STR;
#undef tmp_ICMP_CHKSUM_STR;
#undef tmp_L2_VLAN_STR;
#undef tmp_PACKET_SIZE_STR;

endmacro;

Macro Attack_L4_Other_Treat;

BDOS_L47_OTHER_LOOP:

//load controller bitmask  to cond reg
WriteCond COND_REG, TREG[BDOS_FIELDS_47_TEMP_SEL_OFF]  ;

JMul  WRITE_RES ,   
      OTHER_L23_VLAN, 
      OTHER_L23_PACKET_SIZE;

WRITE_RES:

// Write first part L4 results
Write OREG, BDOS_ATTACK_RESULTS_L4_STR, TREG[TREG_BDOS_RES_OFF], BDOS_ATTACK_RESULT_SIZE, NO_WR_LAST;
jcond;
jmp BDOS_L7_DNS_LOOP;

OTHER_L23_PACKET_SIZE:

LookupAttackField IND_REG, CMP_BDOS_L23_PACKET_SIZE_OFF, 
                  CMP_BDOS_L23_PACKET_SIZE_SIZE, PACKET_SIZE_RES_POS, PACKET_SIZE_RES_OFF, PACKET_SIZE_VALIDATION_BIT, PACKET_SIZE_FLD_TYP;

//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,BIT5_RST ,  1;

JCond;
Jmp BDOS_L47_OTHER_LOOP;

OTHER_L23_VLAN:

LookupAttackField IND_REG, CMP_BDOS_L23_VLAN_OFF, 
                  CMP_BDOS_L23_VLAN_SIZE, L2_VLAN_RES_POS, L2_VLAN_RES_OFF, L2_VLAN_VALIDATION_BIT, L2_VLAN_FLD_TYP;


//reset bit 0x40 
And TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] , TREG[BDOS_FIELDS_47_TEMP_SEL_OFF] ,BIT6_RST ,  1;

JCond;
Jmp BDOS_L47_OTHER_LOOP;

endmacro;


// Macro: LookupAttackField
// Lookup in attack field structure. If there is a match - copy it over the default value

Macro LookupAttackField F_STR,         // One of the BDOS attack structures 14-23 (also includes STRUCT_OFFSET)
                        COMP_KEY_OFF,  // Compound key offset in KREG
                        COMP_KEY_SIZE, // Compound key size
                        TEMP_RES_OFF,  // Offset of the desired field in F_STR result (which will be copied to FINAL_RES_OFF)
                        FINAL_RES_OFF, // Offset where the lookup result will be written in structure BDOS_ATTACK_RESULTS_L23_STR or BDOS_ATTACK_RESULTS_L4_STR
                        VALID_BIT,     // Validation bits mask
                        FLD_TYP;       // Field type


MovImm TREG[ { TREG_TEMP_BDOS_KEY_TYP_OFF }], FLD_TYP, 1;

//no need anymore table will be cleared once time by lookup
//Xor TREG[{TREG_BDOS_RES_OFF + FINAL_RES_OFF}], TREG[0], TREG[0], 4;

Lookup TREG[TREG_TEMP_BDOS_LKP_RES_OFF], F_STR, 
       TREG[TREG_TEMP_BDOS_KEY_TYP_OFF], {19 - COMP_KEY_SIZE}, // First part of key - field type
       TREG[COMP_KEY_OFF], COMP_KEY_SIZE;                      // Second part of key - field value
       //LKPS_MASK VALID_BIT;

// Do not write if lookup fails                    
JNoMatch SKIP_WRITE;

// Copy temporary lookup result to BDOS result (that goes to OREG)
Write TREG[{ TREG_BDOS_RES_OFF + FINAL_RES_OFF }], 1, TREG[{TREG_TEMP_BDOS_LKP_RES_OFF + TEMP_RES_OFF}], 4;

SKIP_WRITE:
//--bug 
//now let's clear temporary result ( think about , may be it could be avoided , why result size is 8 bytes )
// blockhead 4bytes signature + 2 match valid 
//Write  TREG[TREG_TEMP_BDOS_LKP_RES_OFF], 0 , TREG[{TREG_TEMP_BDOS_LKP_RES_OFF+8}] , 8 ;
 
endmacro;

